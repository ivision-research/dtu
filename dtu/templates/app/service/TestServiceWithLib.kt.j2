package {{ app_pkg }}

{% let iface_short = iface|class_simple_name %}
{% let service_class_short = service_class|class_simple_name %}

import {{ iface }}
import `{{ iface }}$Stub`

import android.content.Context
import android.os.Bundle
import android.os.IBinder

class {{ class }}Test(context: Context): AbstractServiceTest(context) {

    // To be used with [createFromBundle] to allow calling this test from the
    // command line. Everything should have a default value!
    class Args()

    override fun doTestConnected(binder: IBinder, extras: Bundle?): Boolean {
      logger.info("Running test for service $SERVICE_PACKAGE/$SERVICE_CLASS")

      val args = createFromBundle(extras, Args::class)
      val proxy = `{{ iface_short }}$Stub`.asInterface(binder)

      try {
          proxy.{{ method }}( /* TODO */ )
      } catch (e: Exception) {
          logger.error("generic error", e)
          return false
      }
      return true
    }

    // These can be ignored

    companion object {
      // These are derived from the entries in the <service> tag, not the AIDL
      // interface
      const val SERVICE_PACKAGE =  {{ service_pkg|unwrap_or(service_class|class_pkg) }}
      const val SERVICE_CLASS = "{{ service_class }}"
      const val SERVICE_CLASS_SHORT = "{{ service_class_short }}"
    }

    override fun getTargetPackage() : String = SERVICE_PACKAGE
    override fun getTargetClassFull() : String = SERVICE_CLASS
}

/**
 * The activity for this test, generally you don't need to modify this
 */
class {{ class }} : AbstractTestActivity() {
    override val serviceClass: Class<*> = {{ class }}Service::class.java
    override val testName = "{{ class }}"
}

/**
 * The service for this test, generally you don't need to modify this
 */
 class {{ class }}Service : TestService({ ctx -> {{ class }}Test(ctx) })
