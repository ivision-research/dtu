// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by protoc 3.19.6
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `apex_manifest.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:apex.proto.ApexManifest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ApexManifest {
    // message fields
    // @@protoc_insertion_point(field:apex.proto.ApexManifest.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:apex.proto.ApexManifest.version)
    pub version: i64,
    // @@protoc_insertion_point(field:apex.proto.ApexManifest.preInstallHook)
    pub preInstallHook: ::std::string::String,
    // @@protoc_insertion_point(field:apex.proto.ApexManifest.postInstallHook)
    pub postInstallHook: ::std::string::String,
    // @@protoc_insertion_point(field:apex.proto.ApexManifest.versionName)
    pub versionName: ::std::string::String,
    // @@protoc_insertion_point(field:apex.proto.ApexManifest.noCode)
    pub noCode: bool,
    // @@protoc_insertion_point(field:apex.proto.ApexManifest.provideNativeLibs)
    pub provideNativeLibs: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:apex.proto.ApexManifest.requireNativeLibs)
    pub requireNativeLibs: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:apex.proto.ApexManifest.jniLibs)
    pub jniLibs: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:apex.proto.ApexManifest.requireSharedApexLibs)
    pub requireSharedApexLibs: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:apex.proto.ApexManifest.provideSharedApexLibs)
    pub provideSharedApexLibs: bool,
    // @@protoc_insertion_point(field:apex.proto.ApexManifest.capexMetadata)
    pub capexMetadata: ::protobuf::MessageField<apex_manifest::CompressedApexMetadata>,
    // @@protoc_insertion_point(field:apex.proto.ApexManifest.supportsRebootlessUpdate)
    pub supportsRebootlessUpdate: bool,
    // special fields
    // @@protoc_insertion_point(special_field:apex.proto.ApexManifest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ApexManifest {
    fn default() -> &'a ApexManifest {
        <ApexManifest as ::protobuf::Message>::default_instance()
    }
}

impl ApexManifest {
    pub fn new() -> ApexManifest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &ApexManifest| { &m.name },
            |m: &mut ApexManifest| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &ApexManifest| { &m.version },
            |m: &mut ApexManifest| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "preInstallHook",
            |m: &ApexManifest| { &m.preInstallHook },
            |m: &mut ApexManifest| { &mut m.preInstallHook },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "postInstallHook",
            |m: &ApexManifest| { &m.postInstallHook },
            |m: &mut ApexManifest| { &mut m.postInstallHook },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "versionName",
            |m: &ApexManifest| { &m.versionName },
            |m: &mut ApexManifest| { &mut m.versionName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "noCode",
            |m: &ApexManifest| { &m.noCode },
            |m: &mut ApexManifest| { &mut m.noCode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "provideNativeLibs",
            |m: &ApexManifest| { &m.provideNativeLibs },
            |m: &mut ApexManifest| { &mut m.provideNativeLibs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "requireNativeLibs",
            |m: &ApexManifest| { &m.requireNativeLibs },
            |m: &mut ApexManifest| { &mut m.requireNativeLibs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "jniLibs",
            |m: &ApexManifest| { &m.jniLibs },
            |m: &mut ApexManifest| { &mut m.jniLibs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "requireSharedApexLibs",
            |m: &ApexManifest| { &m.requireSharedApexLibs },
            |m: &mut ApexManifest| { &mut m.requireSharedApexLibs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "provideSharedApexLibs",
            |m: &ApexManifest| { &m.provideSharedApexLibs },
            |m: &mut ApexManifest| { &mut m.provideSharedApexLibs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, apex_manifest::CompressedApexMetadata>(
            "capexMetadata",
            |m: &ApexManifest| { &m.capexMetadata },
            |m: &mut ApexManifest| { &mut m.capexMetadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "supportsRebootlessUpdate",
            |m: &ApexManifest| { &m.supportsRebootlessUpdate },
            |m: &mut ApexManifest| { &mut m.supportsRebootlessUpdate },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ApexManifest>(
            "ApexManifest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ApexManifest {
    const NAME: &'static str = "ApexManifest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.version = is.read_int64()?;
                },
                26 => {
                    self.preInstallHook = is.read_string()?;
                },
                34 => {
                    self.postInstallHook = is.read_string()?;
                },
                42 => {
                    self.versionName = is.read_string()?;
                },
                48 => {
                    self.noCode = is.read_bool()?;
                },
                58 => {
                    self.provideNativeLibs.push(is.read_string()?);
                },
                66 => {
                    self.requireNativeLibs.push(is.read_string()?);
                },
                74 => {
                    self.jniLibs.push(is.read_string()?);
                },
                82 => {
                    self.requireSharedApexLibs.push(is.read_string()?);
                },
                88 => {
                    self.provideSharedApexLibs = is.read_bool()?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.capexMetadata)?;
                },
                104 => {
                    self.supportsRebootlessUpdate = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.version);
        }
        if !self.preInstallHook.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.preInstallHook);
        }
        if !self.postInstallHook.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.postInstallHook);
        }
        if !self.versionName.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.versionName);
        }
        if self.noCode != false {
            my_size += 1 + 1;
        }
        for value in &self.provideNativeLibs {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        for value in &self.requireNativeLibs {
            my_size += ::protobuf::rt::string_size(8, &value);
        };
        for value in &self.jniLibs {
            my_size += ::protobuf::rt::string_size(9, &value);
        };
        for value in &self.requireSharedApexLibs {
            my_size += ::protobuf::rt::string_size(10, &value);
        };
        if self.provideSharedApexLibs != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.capexMetadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.supportsRebootlessUpdate != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.version != 0 {
            os.write_int64(2, self.version)?;
        }
        if !self.preInstallHook.is_empty() {
            os.write_string(3, &self.preInstallHook)?;
        }
        if !self.postInstallHook.is_empty() {
            os.write_string(4, &self.postInstallHook)?;
        }
        if !self.versionName.is_empty() {
            os.write_string(5, &self.versionName)?;
        }
        if self.noCode != false {
            os.write_bool(6, self.noCode)?;
        }
        for v in &self.provideNativeLibs {
            os.write_string(7, &v)?;
        };
        for v in &self.requireNativeLibs {
            os.write_string(8, &v)?;
        };
        for v in &self.jniLibs {
            os.write_string(9, &v)?;
        };
        for v in &self.requireSharedApexLibs {
            os.write_string(10, &v)?;
        };
        if self.provideSharedApexLibs != false {
            os.write_bool(11, self.provideSharedApexLibs)?;
        }
        if let Some(v) = self.capexMetadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if self.supportsRebootlessUpdate != false {
            os.write_bool(13, self.supportsRebootlessUpdate)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ApexManifest {
        ApexManifest::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.version = 0;
        self.preInstallHook.clear();
        self.postInstallHook.clear();
        self.versionName.clear();
        self.noCode = false;
        self.provideNativeLibs.clear();
        self.requireNativeLibs.clear();
        self.jniLibs.clear();
        self.requireSharedApexLibs.clear();
        self.provideSharedApexLibs = false;
        self.capexMetadata.clear();
        self.supportsRebootlessUpdate = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ApexManifest {
        static instance: ApexManifest = ApexManifest {
            name: ::std::string::String::new(),
            version: 0,
            preInstallHook: ::std::string::String::new(),
            postInstallHook: ::std::string::String::new(),
            versionName: ::std::string::String::new(),
            noCode: false,
            provideNativeLibs: ::std::vec::Vec::new(),
            requireNativeLibs: ::std::vec::Vec::new(),
            jniLibs: ::std::vec::Vec::new(),
            requireSharedApexLibs: ::std::vec::Vec::new(),
            provideSharedApexLibs: false,
            capexMetadata: ::protobuf::MessageField::none(),
            supportsRebootlessUpdate: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ApexManifest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ApexManifest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ApexManifest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApexManifest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ApexManifest`
pub mod apex_manifest {
    // @@protoc_insertion_point(message:apex.proto.ApexManifest.CompressedApexMetadata)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct CompressedApexMetadata {
        // message fields
        // @@protoc_insertion_point(field:apex.proto.ApexManifest.CompressedApexMetadata.originalApexDigest)
        pub originalApexDigest: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:apex.proto.ApexManifest.CompressedApexMetadata.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CompressedApexMetadata {
        fn default() -> &'a CompressedApexMetadata {
            <CompressedApexMetadata as ::protobuf::Message>::default_instance()
        }
    }

    impl CompressedApexMetadata {
        pub fn new() -> CompressedApexMetadata {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "originalApexDigest",
                |m: &CompressedApexMetadata| { &m.originalApexDigest },
                |m: &mut CompressedApexMetadata| { &mut m.originalApexDigest },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompressedApexMetadata>(
                "ApexManifest.CompressedApexMetadata",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for CompressedApexMetadata {
        const NAME: &'static str = "CompressedApexMetadata";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.originalApexDigest = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.originalApexDigest.is_empty() {
                my_size += ::protobuf::rt::string_size(1, &self.originalApexDigest);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.originalApexDigest.is_empty() {
                os.write_string(1, &self.originalApexDigest)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CompressedApexMetadata {
            CompressedApexMetadata::new()
        }

        fn clear(&mut self) {
            self.originalApexDigest.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CompressedApexMetadata {
            static instance: CompressedApexMetadata = CompressedApexMetadata {
                originalApexDigest: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for CompressedApexMetadata {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("ApexManifest.CompressedApexMetadata").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for CompressedApexMetadata {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for CompressedApexMetadata {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13apex_manifest.proto\x12\napex.proto\"\x87\x05\n\x0cApexManifest\
    \x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x18\n\x07version\x18\
    \x02\x20\x01(\x03R\x07version\x12&\n\x0epreInstallHook\x18\x03\x20\x01(\
    \tR\x0epreInstallHook\x12(\n\x0fpostInstallHook\x18\x04\x20\x01(\tR\x0fp\
    ostInstallHook\x12\x20\n\x0bversionName\x18\x05\x20\x01(\tR\x0bversionNa\
    me\x12\x16\n\x06noCode\x18\x06\x20\x01(\x08R\x06noCode\x12,\n\x11provide\
    NativeLibs\x18\x07\x20\x03(\tR\x11provideNativeLibs\x12,\n\x11requireNat\
    iveLibs\x18\x08\x20\x03(\tR\x11requireNativeLibs\x12\x18\n\x07jniLibs\
    \x18\t\x20\x03(\tR\x07jniLibs\x124\n\x15requireSharedApexLibs\x18\n\x20\
    \x03(\tR\x15requireSharedApexLibs\x124\n\x15provideSharedApexLibs\x18\
    \x0b\x20\x01(\x08R\x15provideSharedApexLibs\x12U\n\rcapexMetadata\x18\
    \x0c\x20\x01(\x0b2/.apex.proto.ApexManifest.CompressedApexMetadataR\rcap\
    exMetadata\x12:\n\x18supportsRebootlessUpdate\x18\r\x20\x01(\x08R\x18sup\
    portsRebootlessUpdate\x1aH\n\x16CompressedApexMetadata\x12.\n\x12origina\
    lApexDigest\x18\x01\x20\x01(\tR\x12originalApexDigestB\x1a\n\x10com.andr\
    oid.apexB\x06Protosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(ApexManifest::generated_message_descriptor_data());
            messages.push(apex_manifest::CompressedApexMetadata::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
