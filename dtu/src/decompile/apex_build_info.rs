// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by protoc 3.19.6
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `apex_build_info.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:apex.proto.ApexBuildInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ApexBuildInfo {
    // message fields
    // @@protoc_insertion_point(field:apex.proto.ApexBuildInfo.apexer_command_line)
    pub apexer_command_line: ::std::string::String,
    // @@protoc_insertion_point(field:apex.proto.ApexBuildInfo.file_contexts)
    pub file_contexts: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:apex.proto.ApexBuildInfo.canned_fs_config)
    pub canned_fs_config: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:apex.proto.ApexBuildInfo.android_manifest)
    pub android_manifest: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:apex.proto.ApexBuildInfo.min_sdk_version)
    pub min_sdk_version: ::std::string::String,
    // @@protoc_insertion_point(field:apex.proto.ApexBuildInfo.target_sdk_version)
    pub target_sdk_version: ::std::string::String,
    // @@protoc_insertion_point(field:apex.proto.ApexBuildInfo.no_hashtree)
    pub no_hashtree: bool,
    // @@protoc_insertion_point(field:apex.proto.ApexBuildInfo.override_apk_package_name)
    pub override_apk_package_name: ::std::string::String,
    // @@protoc_insertion_point(field:apex.proto.ApexBuildInfo.logging_parent)
    pub logging_parent: ::std::string::String,
    // @@protoc_insertion_point(field:apex.proto.ApexBuildInfo.payload_fs_type)
    pub payload_fs_type: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:apex.proto.ApexBuildInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ApexBuildInfo {
    fn default() -> &'a ApexBuildInfo {
        <ApexBuildInfo as ::protobuf::Message>::default_instance()
    }
}

impl ApexBuildInfo {
    pub fn new() -> ApexBuildInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "apexer_command_line",
            |m: &ApexBuildInfo| { &m.apexer_command_line },
            |m: &mut ApexBuildInfo| { &mut m.apexer_command_line },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "file_contexts",
            |m: &ApexBuildInfo| { &m.file_contexts },
            |m: &mut ApexBuildInfo| { &mut m.file_contexts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "canned_fs_config",
            |m: &ApexBuildInfo| { &m.canned_fs_config },
            |m: &mut ApexBuildInfo| { &mut m.canned_fs_config },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "android_manifest",
            |m: &ApexBuildInfo| { &m.android_manifest },
            |m: &mut ApexBuildInfo| { &mut m.android_manifest },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_sdk_version",
            |m: &ApexBuildInfo| { &m.min_sdk_version },
            |m: &mut ApexBuildInfo| { &mut m.min_sdk_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_sdk_version",
            |m: &ApexBuildInfo| { &m.target_sdk_version },
            |m: &mut ApexBuildInfo| { &mut m.target_sdk_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "no_hashtree",
            |m: &ApexBuildInfo| { &m.no_hashtree },
            |m: &mut ApexBuildInfo| { &mut m.no_hashtree },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "override_apk_package_name",
            |m: &ApexBuildInfo| { &m.override_apk_package_name },
            |m: &mut ApexBuildInfo| { &mut m.override_apk_package_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "logging_parent",
            |m: &ApexBuildInfo| { &m.logging_parent },
            |m: &mut ApexBuildInfo| { &mut m.logging_parent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "payload_fs_type",
            |m: &ApexBuildInfo| { &m.payload_fs_type },
            |m: &mut ApexBuildInfo| { &mut m.payload_fs_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ApexBuildInfo>(
            "ApexBuildInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ApexBuildInfo {
    const NAME: &'static str = "ApexBuildInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.apexer_command_line = is.read_string()?;
                },
                18 => {
                    self.file_contexts = is.read_bytes()?;
                },
                26 => {
                    self.canned_fs_config = is.read_bytes()?;
                },
                34 => {
                    self.android_manifest = is.read_bytes()?;
                },
                42 => {
                    self.min_sdk_version = is.read_string()?;
                },
                50 => {
                    self.target_sdk_version = is.read_string()?;
                },
                56 => {
                    self.no_hashtree = is.read_bool()?;
                },
                66 => {
                    self.override_apk_package_name = is.read_string()?;
                },
                74 => {
                    self.logging_parent = is.read_string()?;
                },
                82 => {
                    self.payload_fs_type = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.apexer_command_line.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.apexer_command_line);
        }
        if !self.file_contexts.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.file_contexts);
        }
        if !self.canned_fs_config.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.canned_fs_config);
        }
        if !self.android_manifest.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.android_manifest);
        }
        if !self.min_sdk_version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.min_sdk_version);
        }
        if !self.target_sdk_version.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.target_sdk_version);
        }
        if self.no_hashtree != false {
            my_size += 1 + 1;
        }
        if !self.override_apk_package_name.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.override_apk_package_name);
        }
        if !self.logging_parent.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.logging_parent);
        }
        if !self.payload_fs_type.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.payload_fs_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.apexer_command_line.is_empty() {
            os.write_string(1, &self.apexer_command_line)?;
        }
        if !self.file_contexts.is_empty() {
            os.write_bytes(2, &self.file_contexts)?;
        }
        if !self.canned_fs_config.is_empty() {
            os.write_bytes(3, &self.canned_fs_config)?;
        }
        if !self.android_manifest.is_empty() {
            os.write_bytes(4, &self.android_manifest)?;
        }
        if !self.min_sdk_version.is_empty() {
            os.write_string(5, &self.min_sdk_version)?;
        }
        if !self.target_sdk_version.is_empty() {
            os.write_string(6, &self.target_sdk_version)?;
        }
        if self.no_hashtree != false {
            os.write_bool(7, self.no_hashtree)?;
        }
        if !self.override_apk_package_name.is_empty() {
            os.write_string(8, &self.override_apk_package_name)?;
        }
        if !self.logging_parent.is_empty() {
            os.write_string(9, &self.logging_parent)?;
        }
        if !self.payload_fs_type.is_empty() {
            os.write_string(10, &self.payload_fs_type)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ApexBuildInfo {
        ApexBuildInfo::new()
    }

    fn clear(&mut self) {
        self.apexer_command_line.clear();
        self.file_contexts.clear();
        self.canned_fs_config.clear();
        self.android_manifest.clear();
        self.min_sdk_version.clear();
        self.target_sdk_version.clear();
        self.no_hashtree = false;
        self.override_apk_package_name.clear();
        self.logging_parent.clear();
        self.payload_fs_type.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ApexBuildInfo {
        static instance: ApexBuildInfo = ApexBuildInfo {
            apexer_command_line: ::std::string::String::new(),
            file_contexts: ::std::vec::Vec::new(),
            canned_fs_config: ::std::vec::Vec::new(),
            android_manifest: ::std::vec::Vec::new(),
            min_sdk_version: ::std::string::String::new(),
            target_sdk_version: ::std::string::String::new(),
            no_hashtree: false,
            override_apk_package_name: ::std::string::String::new(),
            logging_parent: ::std::string::String::new(),
            payload_fs_type: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ApexBuildInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ApexBuildInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ApexBuildInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApexBuildInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15apex_build_info.proto\x12\napex.proto\"\xba\x03\n\rApexBuildInfo\
    \x12.\n\x13apexer_command_line\x18\x01\x20\x01(\tR\x11apexerCommandLine\
    \x12#\n\rfile_contexts\x18\x02\x20\x01(\x0cR\x0cfileContexts\x12(\n\x10c\
    anned_fs_config\x18\x03\x20\x01(\x0cR\x0ecannedFsConfig\x12)\n\x10androi\
    d_manifest\x18\x04\x20\x01(\x0cR\x0fandroidManifest\x12&\n\x0fmin_sdk_ve\
    rsion\x18\x05\x20\x01(\tR\rminSdkVersion\x12,\n\x12target_sdk_version\
    \x18\x06\x20\x01(\tR\x10targetSdkVersion\x12\x1f\n\x0bno_hashtree\x18\
    \x07\x20\x01(\x08R\nnoHashtree\x129\n\x19override_apk_package_name\x18\
    \x08\x20\x01(\tR\x16overrideApkPackageName\x12%\n\x0elogging_parent\x18\
    \t\x20\x01(\tR\rloggingParent\x12&\n\x0fpayload_fs_type\x18\n\x20\x01(\t\
    R\rpayloadFsTypeB\x1a\n\x10com.android.apexB\x06Protosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ApexBuildInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
